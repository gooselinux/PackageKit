diff -urNp PackageKit-0.5.8.old/backends/yum/pk-backend-yum.c PackageKit-0.5.8/backends/yum/pk-backend-yum.c
--- PackageKit-0.5.8.old/backends/yum/pk-backend-yum.c	2010-07-29 16:01:59.046493286 +0200
+++ PackageKit-0.5.8/backends/yum/pk-backend-yum.c	2010-07-29 16:01:39.107426744 +0200
@@ -24,11 +24,15 @@
 #include <pk-backend-spawn.h>
 #include <string.h>
 
-#define PREUPGRADE_BINARY	"/usr/bin/preupgrade"
-#define YUM_REPOS_DIRECTORY	"/etc/yum.repos.d"
+#define PREUPGRADE_BINARY			"/usr/bin/preupgrade"
+#define YUM_REPOS_DIRECTORY			"/etc/yum.repos.d"
+#define PACKAGE_MEDIA_REPO_FILENAME		"/etc/yum.repos.d/packagekit-media.repo"
 
 static PkBackendSpawn *spawn;
 static GFileMonitor *monitor;
+static GVolumeMonitor *volume_monitor;
+static guint signal_finished = 0;
+static guint signal_status = 0;
 
 /**
  * backend_stderr_cb:
@@ -61,7 +65,125 @@ backend_stdout_cb (PkBackend *backend, c
 static void
 backend_yum_repos_changed_cb (GFileMonitor *monitor_, GFile *file, GFile *other_file, GFileMonitorEvent event_type, PkBackend *backend)
 {
+	gchar *filename;
+
+	/* ignore the packagekit-media.repo file */
+	filename = g_file_get_path (file);
+	if (g_str_has_prefix (filename, PACKAGE_MEDIA_REPO_FILENAME))
+		goto out;
+
+	/* emit signal */
 	pk_backend_repo_list_changed (backend);
+out:
+	g_free (filename);
+}
+
+
+/**
+ * backend_enable_media_repo:
+ */
+static void
+backend_enable_media_repo (gboolean enabled)
+{
+	GKeyFile *keyfile;
+	gboolean ret;
+	gchar *data = NULL;
+	GError *error = NULL;
+
+	/* load */
+	keyfile = g_key_file_new ();
+	ret = g_key_file_load_from_file (keyfile, PACKAGE_MEDIA_REPO_FILENAME,
+					 G_KEY_FILE_KEEP_COMMENTS, &error);
+	if (!ret) {
+		egg_debug ("failed to open %s", error->message);
+		g_error_free (error);
+		goto out;
+	}
+
+	/* set data */
+	g_key_file_set_integer (keyfile, "InstallMedia", "enabled", enabled);
+	data = g_key_file_to_data (keyfile, NULL, &error);
+	if (data == NULL) {
+		egg_warning ("failed to get data: %s", error->message);
+		g_error_free (error);
+		goto out;
+	}
+
+	/* save */
+	ret = g_file_set_contents (PACKAGE_MEDIA_REPO_FILENAME, data, -1, &error);
+	if (!ret) {
+		egg_warning ("failed to save %s", error->message);
+		g_error_free (error);
+		goto out;
+	}
+	egg_debug ("%s InstallMedia", enabled ? "enabled" : "disabled");
+out:
+	g_free (data);
+	g_key_file_free (keyfile);
+}
+
+/**
+ * backend_mount_add:
+ */
+static void
+backend_mount_add (GMount *mount, gpointer user_data)
+{
+	GFile *root;
+	GFile *repo;
+	GFile *dest;
+	gchar *root_path;
+	gchar *repo_path;
+	gboolean ret;
+	GError *error = NULL;
+
+	/* check if any installed media is an install disk */
+	root = g_mount_get_root (mount);
+	root_path = g_file_get_path (root);
+	repo_path = g_build_filename (root_path, "media.repo", NULL);
+	repo = g_file_new_for_path (repo_path);
+	dest = g_file_new_for_path (PACKAGE_MEDIA_REPO_FILENAME);
+
+	/* media.repo exists */
+	ret = g_file_query_exists (repo, NULL);
+	egg_debug ("checking for %s: %s", repo_path, ret ? "yes" : "no");
+	if (!ret)
+		goto out;
+
+	/* copy to the system repo dir */
+	ret = g_file_copy (repo, dest, G_FILE_COPY_OVERWRITE, NULL, NULL, NULL, &error);
+	if (!ret) {
+		egg_warning ("failed to copy: %s", error->message);
+		g_error_free (error);
+	}
+out:
+	g_free (root_path);
+	g_free (repo_path);
+	g_object_unref (dest);
+	g_object_unref (root);
+	g_object_unref (repo);
+}
+
+/**
+ * backend_finished_cb:
+ **/
+static void
+backend_finished_cb (PkBackend *backend, PkExitEnum exit_enum, gpointer user_data)
+{
+	/* disable media repo */
+	backend_enable_media_repo (FALSE);
+}
+
+/**
+ * backend_status_changed_cb:
+ **/
+static void
+backend_status_changed_cb (PkBackend *backend, PkStatusEnum status, gpointer user_data)
+{
+	if (status != PK_STATUS_ENUM_WAIT)
+		return;
+
+	/* enable media repo */
+	backend_enable_media_repo (TRUE);
 }
 
 /**
@@ -73,6 +195,15 @@ backend_initialize (PkBackend *backend)
 {
 	GFile *file;
 	GError *error = NULL;
+	GList *mounts;
+
+	/* connect to finished, so we can clean up */
+	signal_finished =
+		g_signal_connect (backend, "finished",
+				  G_CALLBACK (backend_finished_cb), NULL);
+	signal_status =
+		g_signal_connect (backend, "status-changed",
+				  G_CALLBACK (backend_status_changed_cb), NULL);
 
 	egg_debug ("backend: initialize");
 	spawn = pk_backend_spawn_new ();
@@ -91,6 +222,13 @@ backend_initialize (PkBackend *backend)
 		g_error_free (error);
 	}
 
+	/* coldplug the mounts */
+	volume_monitor = g_volume_monitor_get ();
+	mounts = g_volume_monitor_get_mounts (volume_monitor);
+	g_list_foreach (mounts, (GFunc) backend_mount_add, NULL);
+	g_list_foreach (mounts, (GFunc) g_object_unref, NULL);
+	g_list_free (mounts);
+
 	g_object_unref (file);
 }
 
@@ -105,6 +243,10 @@ backend_destroy (PkBackend *backend)
 	g_object_unref (spawn);
 	if (monitor != NULL)
 		g_object_unref (monitor);
+	g_signal_handler_disconnect (backend, signal_finished);
+	g_signal_handler_disconnect (backend, signal_status);
+	if (volume_monitor != NULL)
+		g_object_unref (volume_monitor);
 }
 
 /**
diff -urNp PackageKit-0.5.8.old/backends/yum/yumBackend.py PackageKit-0.5.8/backends/yum/yumBackend.py
--- PackageKit-0.5.8.old/backends/yum/yumBackend.py	2010-07-29 16:01:59.055493767 +0200
+++ PackageKit-0.5.8/backends/yum/yumBackend.py	2010-07-29 16:00:39.866257925 +0200
@@ -50,6 +50,7 @@ import time
 import os.path
 import logging
 import socket
+import gio
 
 import tarfile
 import tempfile
@@ -58,7 +59,6 @@ import ConfigParser
 
 from yumFilter import *
 from yumComps import *
-from yumMediaManager import MediaManager
 
 # Global vars
 yumbase = None
@@ -814,6 +814,13 @@ class PackageKitYumBackend(PackageKitBas
         '''
         Implement the get-categories functionality
         '''
+        try:
+            self._check_init(lazy_cache=True)
+        except PkError, e:
+            self.error(e.code, e.details, exit=False)
+            return
+        self.yumbase.conf.cache = 0 # Allow new files
+        self.percentage(None)
         self.status(STATUS_QUERY)
         self.allow_cancel(True)
         cats = []
@@ -2803,7 +2810,16 @@ class PackageKitYumBackend(PackageKitBas
         # disable repos that are not contactable
         for repo in self.yumbase.repos.listEnabled():
             try:
-                repo.repoXML
+                if not repo.mediaid:
+                    repo.repoXML
+                else:
+                    root = self.yumbase._media_find_root(repo.mediaid)
+                    if not root:
+                        self.yumbase.repos.disableRepo(repo.id)
+                        self.message(MESSAGE_REPO_METADATA_DOWNLOAD_FAILED,
+                                     "Could not contact media source '%s', so it will be disabled" % repo.id)
+            except exceptions.IOError, e:
+                self.error(ERROR_NO_SPACE_ON_DEVICE, "Disk error: %s" % _to_unicode(e))
             except yum.Errors.RepoError, e:
                 self.yumbase.repos.disableRepo(repo.id)
                 self.message(MESSAGE_REPO_METADATA_DOWNLOAD_FAILED, "Could not contact source '%s', so it will be disabled" % repo.id)
@@ -3078,12 +3094,13 @@ class PackageKitYumBase(yum.YumBase):
         self.missingGPGKey = None
         self.dsCallback = DepSolveCallback(backend)
         self.backend = backend
-        # disable until we have a backend we can use by default
-        # self.mediagrabber = self.MediaGrabber
-        # Setup Repo GPG support callbacks
+        self.mediagrabber = self.MediaGrabber
+        # setup Repo GPG support callbacks
         try:
             self.repos.confirm_func = self._repo_gpg_confirm
             self.repos.gpg_import_func = self._repo_gpg_import
+        except exceptions.IOError, e:
+            raise PkError(ERROR_NO_SPACE_ON_DEVICE, "Disk error: %s" % _to_unicode(e))
         except Exception, e:
             # helpfully, yum gives us TypeError when it can't open the rpmdb
             if str(e).find('rpmdb open failed') != -1:
@@ -3091,106 +3108,73 @@ class PackageKitYumBase(yum.YumBase):
             else:
                 raise PkError(ERROR_INTERNAL_ERROR, _format_str(traceback.format_exc()))
 
-    def MediaGrabber(self, *args, **kwargs):
-        """
-        Handle physical media.
+    def _media_find_root(self, media_id, disc_number=1):
+        """ returns the root "/media/Fedora Extras" or None """
 
-        This module can be summarized like this:
-        For all media:
-        - Lock it
-        - If not mounted: mount it
-        - If it's the wanted media: break
-        - If no media found: ask the user to insert it and loop again
-        ....
-        Release the media
-        """
-        media_id = kwargs["mediaid"]
-        disc_number = kwargs["discnum"]
-        name = kwargs["name"]
-        discs_s = ''
-        found = False
-
-        try:
-            manager = MediaManager()
-        except NotImplementedError, e:
-            # yumRepo will catch this
-            raise yum.Errors.MediaError, "media handling is not implemented"
-
-        media = None
-        found = False
-
-        # loop over and over, retry because the user might insert disc #2 when we need disc #5
-        while 1:
-            # check for the needed media in every media provided by yumMediaManager
-            for media in manager:
-                # mnt now holds the mount point
-                mnt = media.acquire()
-                found = False
+        # search all the disks
+        vm = gio.volume_monitor_get()
+        mounts = vm.get_mounts()
+        for mount in mounts:
+            # is it mounted
+            root = mount.get_root().get_path()
+
+            # is it a media disc
+            discinfo = "%s/.discinfo" % root
+            if not os.path.exists(discinfo):
+                continue
 
-                # if not mounted skip this media for this loop
-                if not mnt:
-                    continue
+            # get the contents
+            f = open(discinfo, "r")
+            lines = f.readlines()
+            f.close()
 
-                # load ".discinfo" from the media and parse it
-                if os.path.exists("%s/.discinfo" %(mnt,)):
-                    f = open("%s/.discinfo" %(mnt,), "r")
-                    lines = f.readlines()
-                    f.close()
-                    theid = lines[0].strip()
-                    discs_s = lines[3].strip()
-
-                    # if discs_s == ALL then no need to match disc number
-                    if discs_s != 'ALL':
-                        discs = map(lambda x: int(x), discs_s.split(","))
-                        samenum = disc_number in discs
-                    else:
-                        samenum = True
+            # not enough lines to be a valid .discinfo
+            if len(lines) < 4:
+                continue
 
-                    # if the media is different or of different number skip it and loop over
-                    if media_id != theid or not samenum:
-                        continue
+            # check this is the right disk
+            media_id_tmp = lines[0].strip()
+            if cmp(media_id_tmp, media_id) != 0:
+                continue
 
-                    # the actual copying is done by URLGrabber
-                    ug = URLGrabber(checkfunc = kwargs["checkfunc"])
-                    try:
-                        ug.urlgrab("%s/%s" %(mnt, kwargs["relative"]),
-                                   kwargs["local"], text=kwargs["text"],
-                                   range=kwargs["range"], copy_local=1)
-                    except (IOError, URLGrabError):
-                        pass
-                    else:
-                        found = True
+            # disc number can be random things like 'ALL'
+            disc_number_tmp = 1
+            try:
+                disc_number_tmp = int(lines[3].strip())
+            except ValueError, e:
+                pass
+            if disc_number_tmp != disc_number:
+                continue
+            return root
 
-                # if we found it end the for loop
-                if found:
-                    break
+        # nothing remaining
+        return None
+
+    def MediaGrabber(self, *args, **kwargs):
+        """
+        Handle physical media.
+        """
+        root = self._media_find_root(kwargs["mediaid"], kwargs["discnum"])
+        if root:
+            # the actual copying is done by URLGrabber
+            ug = URLGrabber(checkfunc = kwargs["checkfunc"])
+            try:
+                ug.urlgrab("%s/%s" % (root, kwargs["relative"]),
+                           kwargs["local"], text=kwargs["text"],
+                           range=kwargs["range"], copy_local=1)
+            except (IOError, URLGrabError), e:
+                pass
 
-            # if we found it end the while loop
-            if found:
-                break
-
-            # construct human readable media_text
-            if disc_number:
-                media_text = "%s #%d" % (name, disc_number)
-            else:
-                media_text = name
-
-            # see http://lists.freedesktop.org/archives/packagekit/2009-May/004808.html
-            # and http://cgit.freedesktop.org/packagekit/commit/?id=79e8736197b552a5ce206a712cd3b6c80cf2e86d
-            self.backend.media_change_required(MEDIA_TYPE_DISC, name, media_text)
+        # we have to send a message to the client
+        if not root:
+            name = kwargs["name"]
+            self.backend.media_change_required(MEDIA_TYPE_DISC, name, name)
             self.backend.error(ERROR_MEDIA_CHANGE_REQUIRED,
-                               "Insert media labeled '%s' or disable media repos" % media_text,
-                               exit = False)
-            break
-
-        # if we got a media object destruct it to release the media (which will unmount and unlock if needed)
-        if media:
-            del media
-
-        # I guess we come here when the user in PK clicks cancel
-        if not found:
-            # yumRepo will catch this
+                               "Insert media labeled '%s' or disable media repos" % name,
+                               exit=False)
             raise yum.Errors.MediaError, "The disc was not inserted"
+
+        # yay
         return kwargs["local"]
 
     def _repo_gpg_confirm(self, keyData):
diff -urNp PackageKit-0.5.8.old/src/pk-backend.c PackageKit-0.5.8/src/pk-backend.c
--- PackageKit-0.5.8.old/src/pk-backend.c	2010-07-29 16:01:59.057493873 +0200
+++ PackageKit-0.5.8/src/pk-backend.c	2010-07-29 16:00:39.867257978 +0200
@@ -1893,6 +1893,7 @@ pk_backend_set_role (PkBackend *backend,
 	egg_debug ("setting role to %s", pk_role_enum_to_text (role));
 	backend->priv->role = role;
 	backend->priv->status = PK_STATUS_ENUM_WAIT;
+	g_signal_emit (backend, signals[SIGNAL_STATUS_CHANGED], 0, backend->priv->status);
 	return TRUE;
 }
 
diff -urNp PackageKit-0.5.8.old/src/pk-transaction.c PackageKit-0.5.8/src/pk-transaction.c
--- PackageKit-0.5.8.old/src/pk-transaction.c	2010-07-29 16:01:59.060494034 +0200
+++ PackageKit-0.5.8/src/pk-transaction.c	2010-07-29 16:00:39.870258138 +0200
@@ -1345,6 +1345,10 @@ pk_transaction_status_changed_cb (PkBack
 	g_return_if_fail (PK_IS_TRANSACTION (transaction));
 	g_return_if_fail (transaction->priv->tid != NULL);
 
+	/* don't proxy this on the bus, just for use internal */
+	if (status == PK_STATUS_ENUM_WAIT)
+		return;
+
 	/* have we already been marked as finished? */
 	if (transaction->priv->finished) {
 		egg_warning ("Already finished, so can't proxy status %s", pk_status_enum_to_text (status));
